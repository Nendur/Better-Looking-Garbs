###################################
#
# Better Looking Garbs
#
# Events to alter ethnicity on newly created characters.
#
###################################

namespace = blg

# Ethnic diversity in random courtier spawns.
character_event = {
	id = blg.1
	hide_window = yes
	is_triggered_only = yes

	ai = yes
	min_age = 1
	trigger = {
		trait = blgspawn
	}
	immediate = {
		remove_trait = blgspawn
		character_event = { id = blg.7 }
	}

	option = { # Leave unchanged / Ruler culture
		ai_chance = {
			factor = 6
		}
	}

	option = { # Local province
		ai_chance = { factor = 3 }
		trigger = {
			employer = {
				NOT = { character = no }
				is_landed = yes
				culture = ROOT
			}
			OR = { dynasty = none num_of_dynasty_members <= 1 }
			NOR = {
				culture_group = winter_group
				culture_group = unoccupied_group
				culture_group = old_races
				culture = high_valyrian
				culture = dragon_culture
			}
			NOT = { has_game_rule = { name = blg_new_characters value = off } }
		}

		random_realm_province = {
			limit = {
				NOR = {
					province = no
					culture_group = winter_group
					culture_group = unoccupied_group
					culture_group = old_races
					culture = high_valyrian
					culture = dragon_culture
				}
			}
			ROOT = {
				set_graphical_culture = PREV
				# random = { chance = 25 culture = PREV }
				# random = { chance = 25 religion = PREV }
			}
		}
	}

	option = { # Neighbour of local province
		ai_chance = { factor = 2 }
		trigger = {
			employer = {
				NOT = { character = no }
				is_landed = yes
				culture = ROOT
			}
			OR = { dynasty = none num_of_dynasty_members <= 1 }
			NOR = {
				culture_group = winter_group
				culture_group = unoccupied_group
				culture_group = old_races
				culture = high_valyrian
				culture = dragon_culture
			}
			NOT = { has_game_rule = { name = blg_new_characters value = off } }
		}

		random_realm_province = {
			limit = { NOT = { province = no } }
			random_neighbor_province = {
				limit = {
					NOR = {
						province = no
						culture_group = winter_group
						culture_group = unoccupied_group
						culture_group = old_races
						culture = high_valyrian
						culture = dragon_culture
					}
				}
				ROOT = {
					set_graphical_culture = PREV
					# random = { chance = 25 culture = PREV }
					# random = { chance = 25 religion = PREV }
				}
			}
		}
	}

	option = { # Bear species
		ai_chance = { factor = 100 }
		trigger = {
			OR = {
				graphical_culture = beargfx
				graphical_culture = polarbeargfx
				graphical_culture = blackbeargfx
			}
		}

		if = {
			limit = {
				location = {
					OR = {
						region = world_north
						region = world_shivering_sea
					}
					OR = {
						terrain = arctic
						has_province_modifier = asoiaf_normal_winter
						has_province_modifier = asoiaf_harsh_winter
					}
				}
			}
			set_graphical_culture = polar_bear
		}
		else_if = {
			limit = {
				location = {
					region = world_essos
				}
			}
			set_graphical_culture = black_bear
		}
		else = {
			set_graphical_culture = bear
		}
	}

	# Add freckles to new characters.
	after = {
		if = {
			limit = {
				NOR = {
					graphical_culture = whitewalkergfx
					graphical_culture = ruingfx
					graphical_culture = islandergfx
					graphical_culture = brindlegfx
					graphical_culture = giantgfx
					graphical_culture = cotfgfx
					graphical_culture = dragongfx
				}
			}

			random_list = {
				2 = { add_trait = freckles_5 }
				6 = { add_trait = freckles_4 }
				7 = { add_trait = freckles }
				7 = { add_trait = freckles_2 }
				10 = { add_trait = freckles_3 }
				5000 = {
					modifier = {
						factor = 0.025
						OR = {
							graphical_culture = riverlandergfx
							graphical_culture = tullygfx
						}
					}
					modifier = {
						factor = 0.05
						OR = {
							graphical_culture = valemangfx
							graphical_culture = arryngfx
						}
					}
					modifier = {
						factor = 0.075
						OR = {
							graphical_culture = westermangfx
							graphical_culture = lannistergfx
							graphical_culture = reynegfx
							graphical_culture = sistermangfx
						}
					}
					modifier = {
						factor = 0.1
						OR = {
							graphical_culture = crownlandergfx
							graphical_culture = stormlandergfx
							graphical_culture = baratheongfx
						}
					}
					modifier = {
						factor = 0.25
						OR = {
							graphical_culture = reachmangfx
							graphical_culture = tyrellgfx
							graphical_culture = northmangfx
							graphical_culture = starkgfx
						}
					}
					modifier = {
						factor = 0.5
						OR = {
							graphical_culture = ironborngfx
							graphical_culture = hoaregfx
							graphical_culture = greyjoygfx
							graphical_culture = dornishgfx
							graphical_culture = stonedornishgfx
						}
					}
					modifier = {
						factor = 0.6
						OR = {
							graphical_culture = pentosigfx
							graphical_culture = braavosigfx
							graphical_culture = norvosigfx
							graphical_culture = myrmangfx
							graphical_culture = ghiscarigfx
						}
					}
					modifier = {
						factor = 0.75
						OR = {
							graphical_culture = freefolkgfx
							graphical_culture = firstmangfx
							graphical_culture = saltdornishgfx
							graphical_culture = sanddornishgfx
							graphical_culture = martellgfx
						}
					}
				}
			}
		}
	}
}

# Mixed ethnicity for children.
# Called from on_birth
character_event = {
	id = blg.2
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		remove_trait = blgspawn

		if = {
			limit = { is_father_real_father = yes }
			father_even_if_dead = { save_event_target_as = father }
		}
		else = {
			real_father_even_if_dead = { save_event_target_as = father }
		}
		event_target:father = {
			if = {
				limit = { is_father_real_father = yes }
				father_even_if_dead = { save_event_target_as = paternalgrandfather }
			}
			else = {
				real_father_even_if_dead = { save_event_target_as = paternalgrandfather }
			}
		}
		mother_even_if_dead = {
			if = {
				limit = { is_father_real_father = yes }
				father_even_if_dead = { save_event_target_as = maternalgrandfather }
			}
			else = {
				real_father_even_if_dead = { save_event_target_as = maternalgrandfather }
			}
		}

		if = {
			limit = {
				NOR = {
					trait = freckles
					trait = freckles_2
					trait = freckles_3
					trait = freckles_4
					trait = freckles_5
				}
				OR = {
					graphical_culture = riverlandergfx
					graphical_culture = tullygfx
					graphical_culture = valemangfx
					graphical_culture = arryngfx
					mother_even_if_dead = {
						OR = {
							trait = freckles_3
							trait = freckles_2
							trait = freckles
							trait = freckles_4
							trait = freckles_5
							mother_even_if_dead = {
								OR = {
									trait = freckles_3
									trait = freckles_2
									trait = freckles
									trait = freckles_4
									trait = freckles_5
								}
							}
							event_target:maternalgrandfather = {
								OR = {
									trait = freckles_3
									trait = freckles_2
									trait = freckles
									trait = freckles_4
									trait = freckles_5
								}
							}
							graphical_culture = riverlandergfx
							graphical_culture = tullygfx
							graphical_culture = valemangfx
							graphical_culture = arryngfx
						}
					}
					event_target:father = {
						OR = {
							trait = freckles_3
							trait = freckles_2
							trait = freckles
							trait = freckles_4
							trait = freckles_5
							mother_even_if_dead = {
								OR = {
									trait = freckles_3
									trait = freckles_2
									trait = freckles
									trait = freckles_4
									trait = freckles_5
								}
							}
							event_target:paternalgrandfather = {
								OR = {
									trait = freckles_3
									trait = freckles_2
									trait = freckles
									trait = freckles_4
									trait = freckles_5
								}
							}
							graphical_culture = riverlandergfx
							graphical_culture = tullygfx
							graphical_culture = valemangfx
							graphical_culture = arryngfx
						}
					}
				}
			}

			random_list = {
				2 = {
					add_trait = freckles_5
					modifier = {
						factor = 5
						mother_even_if_dead = { trait = freckles_5 }
					}
					modifier = {
						factor = 5
						event_target:father = { trait = freckles_5 }
					}
					#Grandparents
					modifier = {
						factor = 4
						event_target:paternalgrandfather = { trait = freckles_5 }
					}
					modifier = {
						factor = 4
						event_target:father = { mother_even_if_dead = { trait = freckles_5 } }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { mother_even_if_dead = { trait = freckles_5 } }
					}
					modifier = {
						factor = 4
						event_target:maternalgrandfather = { trait = freckles_5 }
					}

					modifier = {
						factor = 3
						mother_even_if_dead = { trait = freckles_4 }
					}
					modifier = {
						factor = 3
						event_target:father = { trait = freckles_4 }
					}
					#Grandparents
					modifier = {
						factor = 2
						event_target:paternalgrandfather = { trait = freckles_4 }
					}
					modifier = {
						factor = 2
						event_target:father = { mother_even_if_dead = { trait = freckles_4 } }
					}
					modifier = {
						factor = 2
						event_target:maternalgrandfather = { trait = freckles_4 }
					}
					modifier = {
						factor = 2
						mother_even_if_dead = { mother_even_if_dead = { trait = freckles_4 } }
					}
					#Multiplier bonus
					modifier = {
						factor = 2
						event_target:father = { trait = freckles_4 }
						mother_even_if_dead = { trait = freckles_4 }
					}
					#The thickest versions should only appear if a parent already has the freckles gene, not appear out of nowhere.
					trigger = {
						mother_even_if_dead = {
							OR = {
								trait = freckles_3
								trait = freckles_2
								trait = freckles
								trait = freckles_4
								trait = freckles_5
							}
						}
						event_target:father = {
							OR = {
								trait = freckles_3
								trait = freckles_2
								trait = freckles
								trait = freckles_4
								trait = freckles_5
							}
						}
					}
				}
				6 = {
					add_trait = freckles_4
					modifier = {
						factor = 4
						mother_even_if_dead = { trait = freckles_4 }
					}
					modifier = {
						factor = 4
						event_target:father = { trait = freckles_4 }
					}
					#Grandparents
					modifier = {
						factor = 3
						event_target:paternalgrandfather = { trait = freckles_4 }
					}
					modifier = {
						factor = 3
						event_target:father = { mother_even_if_dead = { trait = freckles_4 } }
					}
					modifier = {
						factor = 3
						event_target:maternalgrandfather = { trait = freckles_4 }
					}
					modifier = {
						factor = 3
						mother_even_if_dead = { mother_even_if_dead = { trait = freckles_4 } }
					}

					modifier = {
						factor = 2
						mother_even_if_dead = { trait = freckles }
					}
					modifier = {
						factor = 2
						event_target:father = { trait = freckles }
					}
					#Grandparents
					modifier = {
						factor = 1.5
						event_target:paternalgrandfather = { trait = freckles }
					}
					modifier = {
						factor = 1.5
						event_target:father = { mother_even_if_dead = { trait = freckles } }
					}
					modifier = {
						factor = 1.5
						event_target:maternalgrandfather = { trait = freckles }
					}
					modifier = {
						factor = 1.5
						mother_even_if_dead = { mother_even_if_dead = { trait = freckles } }
					}
					#Multiplier bonus
					modifier = {
						factor = 2
						event_target:father = { trait = freckles }
						mother_even_if_dead = { trait = freckles }
					}
					#The thickest versions should only appear if a parent already has the freckles gene, not appear out of nowhere.
					trigger = {
						mother_even_if_dead = {
							OR = {
								trait = freckles_3
								trait = freckles_2
								trait = freckles
								trait = freckles_4
								trait = freckles_5
							}
						}
						event_target:father = {
							OR = {
								trait = freckles_3
								trait = freckles_2
								trait = freckles
								trait = freckles_4
								trait = freckles_5
							}
						}
					}
				}
				7 = {
					add_trait = freckles
					modifier = {
						factor = 4
						mother_even_if_dead = { trait = freckles }
					}
					modifier = {
						factor = 4
						event_target:father = { trait = freckles }
					}
					#Grandparents
					modifier = {
						factor = 3
						event_target:paternalgrandfather = { trait = freckles }
					}
					modifier = {
						factor = 3
						event_target:father = { mother_even_if_dead = { trait = freckles } }
					}
					modifier = {
						factor = 3
						event_target:maternalgrandfather = { trait = freckles }
					}
					modifier = {
						factor = 3
						mother_even_if_dead = { mother_even_if_dead = { trait = freckles } }
					}

					modifier = {
						factor = 2
						mother_even_if_dead = { trait = freckles_2 }
					}
					modifier = {
						factor = 2
						event_target:father = { trait = freckles_2 }
					}
					#Grandparents
					modifier = {
						factor = 1.5
						event_target:paternalgrandfather = { trait = freckles_2 }
					}
					modifier = {
						factor = 1.5
						event_target:father = { mother_even_if_dead = { trait = freckles_2 } }
					}
					modifier = {
						factor = 1.5
						event_target:maternalgrandfather = { trait = freckles_2 }
					}
					modifier = {
						factor = 1.5
						mother_even_if_dead = { mother_even_if_dead = { trait = freckles_2 } }
					}
					#Multiplier bonus
					modifier = {
						factor = 2
						event_target:father = { trait = freckles_2 }
						mother_even_if_dead = { trait = freckles_2 }
					}
					#The thickest versions should only appear if a parent already has the freckles gene, not appear out of nowhere.
					trigger = {
						mother_even_if_dead = {
							OR = {
								trait = freckles_3
								trait = freckles_2
								trait = freckles
								trait = freckles_4
								trait = freckles_5
							}
						}
						event_target:father = {
							OR = {
								trait = freckles_3
								trait = freckles_2
								trait = freckles
								trait = freckles_4
								trait = freckles_5
							}
						}
					}
				}
				7 = {
					add_trait = freckles_2
					modifier = {
						factor = 4
						mother_even_if_dead = { trait = freckles_2 }
					}
					modifier = {
						factor = 4
						event_target:father = { trait = freckles_2 }
					}
					#Grandparents
					modifier = {
						factor = 2
						event_target:paternalgrandfather = { trait = freckles_2 }
					}
					modifier = {
						factor = 2
						event_target:father = { mother_even_if_dead = { trait = freckles_2 } }
					}
					modifier = {
						factor = 2
						event_target:maternalgrandfather = { trait = freckles_2 }
					}
					modifier = {
						factor = 2
						mother_even_if_dead = { mother_even_if_dead = { trait = freckles_2 } }
					}

					modifier = {
						factor = 2
						mother_even_if_dead = { trait = freckles_3 }
					}
					modifier = {
						factor = 2
						event_target:father = { trait = freckles_3 }
					}
					#Grandparents
					modifier = {
						factor = 1.5
						event_target:paternalgrandfather = { trait = freckles_3 }
					}
					modifier = {
						factor = 1.5
						event_target:father = { mother_even_if_dead = { trait = freckles_3 } }
					}
					modifier = {
						factor = 1.5
						event_target:maternalgrandfather = { trait = freckles_3 }
					}
					modifier = {
						factor = 1.5
						mother_even_if_dead = { mother_even_if_dead = { trait = freckles_3 } }
					}
					#Multiplier bonus
					modifier = {
						factor = 2
						event_target:father = { trait = freckles_3 }
						mother_even_if_dead = { trait = freckles_3 }
					}
				}
				10 = {
					add_trait = freckles_3
					modifier = {
						factor = 2
						mother_even_if_dead = { trait = freckles_3 }
					}
					modifier = {
						factor = 2
						event_target:father = { trait = freckles_3 }
					}
					#Grandparents
					modifier = {
						factor = 1.5
						event_target:paternalgrandfather = { trait = freckles_3 }
					}
					modifier = {
						factor = 1.5
						event_target:father = { mother_even_if_dead = { trait = freckles_3 } }
					}
					modifier = {
						factor = 1.5
						event_target:maternalgrandfather = { trait = freckles_3 }
					}
					modifier = {
						factor = 1.5
						mother_even_if_dead = { mother_even_if_dead = { trait = freckles_3 } }
					}
				}
				80 = { } #Nothing
			}
		}
	}
}

# Check when new society quests start.
character_event = {
	id = blg.3
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_in_society = yes
		NOT = { trait = blgcaoff }
	}

	immediate = {
		if = {
			limit = {
				has_any_quest = yes
			}
			add_trait = blgquesting
		}
		else = {
			repeat_event = { id = blg.3 days = 7}
		}
	}
}

# Installatian check event.
character_event = {
	id    = blg.4
	title = BETTER_LOOKING_GARBS
	desc  = blg.4.desc

	picture = GFX_evt_church_council
	border = GFX_event_normal_frame_intrigue
	hide_from = yes

	is_triggered_only = yes

	ai = no
	trigger = {
		OR = {
			has_dlc = "The Sword of Islam"
			has_dlc = "Legacy of Rome"
			has_dlc = "Sunset Invasion"
			has_dlc = "The Republic"
			has_dlc = "The Old Gods"
			has_dlc = "Sons of Abraham"
			has_dlc = "Rajas of India"
			has_dlc = "Charlemagne"
			has_dlc = "Way of Life"
			has_dlc = "Horse Lords"
			has_dlc = "Conclave"
			has_dlc = "Reapers"
			has_dlc = "Mystics"
			has_dlc = "Jade Dragon"
			has_dlc = "Holy Fury"
		}
	}

	option = {
		name = blg.4.opt
	}
}

# Add tattoos
character_event = {
	id = blg.7

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = { employer = { primary_title = { title = c_fiery_hand } } }
			add_trait = african_tattoo_10
		}
		else_if = {
			limit = {
				OR = {
					trait = slave
					trait = former_slave
				}
				OR = {
					culture = volantene
					employer = { culture = volantene }
					employer = { culture = eastern_valyrian }
				}
			}

			if = {
				limit = { trait = red_priest }
				add_character_modifier = { name = zun_warpaint_1 duration = -1 }
			}
			else_if = {
				limit = { has_minor_title = court_jester }
				add_character_modifier = { name = aztec_warpaint_1 duration = -1 }
			}
			else_if = {
				limit = {
					OR = {
						has_minor_title = title_commander
						employer = { primary_title = { mercenary = yes } }
					}
				}
				add_trait = african_tattoo_9
			}
			else = {
				random_list = {
					10 = { add_character_modifier = { name = finnish_warpaint_1 duration = -1 } }
					10 = { add_character_modifier = { name = finnish_warpaint_2 duration = -1 } }
					10 = { add_character_modifier = { name = zun_warpaint_2 duration = -1 } }
					10 = { add_trait = african_tattoo_2 }
					10 = { add_trait = african_tattoo_3 }
				}
			}
		}
		else_if = {
			limit = { culture = shadowlander }

			random_list = {
				10 = { add_trait = norse_tattoo_1 }
				10 = { add_trait = norse_tattoo_2 }
				10 = { add_trait = norse_tattoo_3 }
				10 = { add_trait = norse_tattoo_4 }
				10 = { add_trait = norse_tattoo_5 }
				10 = { add_trait = norse_tattoo_6 }
				10 = { add_trait = slavic_tattoo_1 }
				10 = { add_trait = slavic_tattoo_2 }
				10 = { add_trait = slavic_tattoo_3 }
				10 = { add_trait = slavic_tattoo_4 }
				10 = { add_trait = slavic_tattoo_5 }
				10 = { add_trait = slavic_tattoo_6 }
			}
		}
	}
}

# Bearly Legal
long_character_event = {
	id = bear.6
	
	title = bear.6.title
	desc = bear.6.desc
	picture = GFX_evt_feast
	
	is_triggered_only = yes
	
	prisoner = no
	only_capable = yes
	
	trigger = {
		event_target:bear = {
			prisoner = no
			host = { character = ROOT }
			is_alive = yes
			ai = yes
		}
	}
	
	fail_trigger_effect = {
		clr_character_flag = secret_bear_chain
	}
	
	immediate = {
		event_target:bear = {
			culture_scope = { save_event_target_as = original_culture }
			gfx_culture_scope = { save_event_target_as = original_gfx_culture }
			clr_character_flag = secret_bear

			if = {
				limit = {
					location = {
						OR = {
							region = world_north
							region = world_shivering_sea
						}
						OR = {
							terrain = arctic
							has_province_modifier = asoiaf_normal_winter
							has_province_modifier = asoiaf_harsh_winter
						}
					}
				}
				set_graphical_culture = polar_bear
			}
			else_if = {
				limit = {
					location = {
						region = world_essos
					}
				}
				set_graphical_culture = black_bear
			}
			else = {
				set_graphical_culture = bear
			}
			culture = bear
		}
	}
	
	option = {
		name = bear.6.a
	}
	option = {
		name = bear.6.undo
		custom_tooltip = {
			text = UNDO_BEAR_TRANSFORMATION
			event_target:bear = {
				set_graphical_culture = event_target:original_culture
				culture = event_target:original_gfx_culture
			}
		}
	}
	option = {
		name = bear.6.b
		trigger = {
			NOT = { trait = hunter }
		}
	}
	option = {
		name = bear.6.d
		trigger = {
			NOR = {
				trait = cannibal_trait
				trait = lunatic
			}
		}
	}
	option = {
		tooltip_info = cannibal_trait
		name = bear.6.e
		trigger = {
			trait = cannibal_trait
		}
		event_target:bear = {
			death = {
				death_reason = death_execution_eaten
				killer = ROOT
			}
		}
	}
	option = {
		tooltip_info = lunatic
		name = bear.6.e
		trigger = {
			NOT = { trait = cannibal_trait }
			trait = lunatic
		}
		event_target:bear = {
			death = {
				death_reason = death_execution_eaten
				killer = ROOT
			}
		}
	}
	option = {
		tooltip_info = hunter
		name = bear.6.f
		trigger = {
			trait = hunter
		}
		event_target:bear = {
			death = {
				death_reason = death_execution_hunt
				killer = ROOT
			}
		}
		prestige = 100
	}
	
	after = {
		clr_character_flag = secret_bear_chain
	}
}
